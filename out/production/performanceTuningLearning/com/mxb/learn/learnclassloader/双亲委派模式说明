总结一下：
    一、类加载是一个过程，那么，如果讲我们自己写的一个类进行一个加载呢？底层是如何运行？

    （1）首先我们写了一个类，是属于Java程序中的一个类
    （2）加载类肯定需要一个工具，就是java.exe，这是一个c++语言实现的，作用就是创建一个引导类加载器，
    实例化sun.misc.lancher，launcher构造方法中同事也会构建了两个类加载器，就是扩展类加载器和应用类
    加载器
    （3）jvm默认会使用launcher中的getclassLoader()方法，这个方法默认是返回AppClassLoader实例来
    加载我们的应用程序

    二、双亲委派是什么意思，流程是什么？
    （1）首先我们jvm类加载器是有亲自层级结构的，引导类加载器>>扩展类加载器>>应用程序类加载器>>自定义加载器
    （2）流程：加载某个类的时候，会先委托父加载器寻找目标类，如果找不到就继续委托上层，如果所有上层类加载器
    路径下都找不到这个目标类，那么就在自己的类加载器路径下寻找载入目标类
    （3）举个例子：我们之前创建的Math类，com.mxb.learn.learnclassloader.Math.最先肯定是jvm默认的
    AppClassLoader加载器加载，但是它会委托上级ExtClassLoader进行记载，如果没找到，就继续委托上级
    BootrapClassLoader加载器进行加载，如果还是找不到，那么就还是向下退回，用自己AppClassLoader加载器加载
    （4）一句话：先找父亲加载，不行再由儿子自己加载

    三、从源码进行解读
    （1）ClassLoader的loadClass()方法，实现的就是双亲委派机制

    （2）从源码中可以看出：
       findLoadedClass(name)判断会否之前已经加载过，如果加载过，直接返回。
       如果之前没有加载过，parent.loadClass(name, false),委托父加载器加载类
       如果父类加载器为空则委托引导类加载器 finBootstrapClassOrNull(name)
       如果还是没有找到目标类，那么，就会调用自己的类加载器，findClass(name)进行加载，默认就是AppClassLoader

    四、为什么要设计双亲委派模式？
    （1）沙箱安全机制：自己如果写一个java.lang.String.class类不会被加载，这样可以防止核心类库被篡改
    （2）避免类的重复加载：当父亲已经加载了该类是，就没有必要ClassLoader在加载一遍，保证被加载类的唯一性

    五、全盘负责委托机制
       当一个ClassLoader加载一个类，这个类中如果使用到其他类，也会使用这个加载器进行载入，除非你显示的使用另一个ClassLoader
